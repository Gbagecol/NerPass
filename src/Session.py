"""
Module for Session class to represent and manipulate a current user's login session.
"""

from csv import DictReader


#######################
#    Session Class    #
#######################

class Session():
    """
    A class to manage the current login session.
    """

    #####################
    #    Constructor    #
    #####################

    def __init__(self, username: str, pwHash: bytes):
        """
        Creates a new Session object.
        Parameters:
            `username`: The username for the current user.
            `pwHash`: The current user's password hash as bytes.
        """

        #init

        self.USERNAME = username #current user's username
        self.PW_HASH = pwHash #current user's password hash
        self.PW_FILE_PATH = "../data/.passwords/{}".format(self.USERNAME) #path to this user's password file
        self._passwordEntries = self._loadPasswords() #list of user's password entries


    #################
    #    Methods    #
    #################

    def addPassword(self, pwName: str, password: str) -> bool:
        """
        Attempts to add a new password entry to the current user's password list. This fails if an entry already exists
        for a similar name.
        Parameters:
            `pwName`: A name to associate with the new password.
            `password`: The plaintext password.
        Returns:
            True if the password is successfully added. If an entry already existed for the given name, false is
            returned.
        """

        #check for existing entry
        if self._doesPasswordEntryExist(pwName):
            return False
        else:
            self._passwordEntries.append({"pwName": pwName, "password": password}) #add entry to list
            return True

    def _loadPasswords(self) -> list:
        """
        Loads the current user's passwords from their file. If the user does not have a file, a new password file is
        generated.
        Returns:
            A list of every row in the password file as generated by csv.DictReader.
        """

        #attempt to load passwords
        try:
            
            with open(self.PW_FILE_PATH, 'r') as passwordFile:

                csvReader = DictReader(passwordFile) #csv file reader
                
                return [row for row in csvReader] #get rows from file and return

        #if file doesn't exist
        except FileNotFoundError:
            self._generatePasswordFile() #generate new file
            return []

    def _doesPasswordEntryExist(self, pwName: str) -> bool:
        """
        Checks if there is already a password entry for a similar name.
        Parameters:
            `pwName`: The name to check for.
        Returns:
            True if there is an entry for a similar name, false otherwise.
        """

        return pwName in [row["pwName"] for row in self._passwordEntries]

    def _generatePasswordFile(self):
        """
        Generates a new password file for the current user if it doesn't exist.
        """

        #write file header
        with open(self.PW_FILE_PATH, 'w') as passwordFile:
            passwordFile.write("pwName,password\n")


##############
#    Main    #
##############

if __name__ == "__main__":

    session = Session("test", "test")
    print(session._passwordEntries)
    print(session.addPassword("test2", "test"))
    print(session._passwordEntries)